/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : BatteryCooling_ES80.sm
 */

#ifndef _BATTERYCOOLING_ES80_SM_H
#define _BATTERYCOOLING_ES80_SM_H

#include <assert.h>
#include <statemap.h>


struct BatteryCooling_ES80;
struct BatteryCooling_ES80Context;

struct BatteryCooling_ES80State {
    void(*Back_2Idle)(struct BatteryCooling_ES80Context *const fsm);
    void(*Ready)(struct BatteryCooling_ES80Context *const fsm);
    void(*Run)(struct BatteryCooling_ES80Context *const fsm);
    void(*Stop)(struct BatteryCooling_ES80Context *const fsm);
    void(*Switch_2ChargingMode)(struct BatteryCooling_ES80Context *const fsm);
    void(*Switch_2DrivingMode)(struct BatteryCooling_ES80Context *const fsm);
    void(*Default)(struct BatteryCooling_ES80Context *const fsm);
    STATE_MEMBERS
};

extern const struct BatteryCooling_ES80State BatteryCoolingMap_Idle;
extern const struct BatteryCooling_ES80State BatteryCoolingMap_DrivingMode;
extern const struct BatteryCooling_ES80State BatteryCoolingMap_ChargingMode;
extern const struct BatteryCooling_ES80State BatteryCoolingMap_DrivingCoolingReady;
extern const struct BatteryCooling_ES80State BatteryCoolingMap_RunningDrivingCooling;
extern const struct BatteryCooling_ES80State BatteryCoolingMap_ChargingCoolingReady;
extern const struct BatteryCooling_ES80State BatteryCoolingMap_RunningChargingCooling;

struct BatteryCooling_ES80Context {
    struct BatteryCooling_ES80 *_owner;
    FSM_MEMBERS(BatteryCooling_ES80)
};

#ifdef NO_BATTERYCOOLING_ES80_SM_MACRO
extern void BatteryCooling_ES80Context_Init(struct BatteryCooling_ES80Context *const fsm, struct BatteryCooling_ES80 *const owner);
extern void BatteryCooling_ES80Context_Back_2Idle(struct BatteryCooling_ES80Context *const fsm);
extern void BatteryCooling_ES80Context_Ready(struct BatteryCooling_ES80Context *const fsm);
extern void BatteryCooling_ES80Context_Run(struct BatteryCooling_ES80Context *const fsm);
extern void BatteryCooling_ES80Context_Stop(struct BatteryCooling_ES80Context *const fsm);
extern void BatteryCooling_ES80Context_Switch_2ChargingMode(struct BatteryCooling_ES80Context *const fsm);
extern void BatteryCooling_ES80Context_Switch_2DrivingMode(struct BatteryCooling_ES80Context *const fsm);
#else
#define BatteryCooling_ES80Context_Init(fsm, owner) \
    FSM_INIT((fsm), &BatteryCoolingMap_Idle); \
    (fsm)->_owner = (owner)

#define BatteryCooling_ES80Context_Back_2Idle(fsm) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "Back_2Idle"); \
    getState(fsm)->Back_2Idle((fsm)); \
    setTransition((fsm), NULL)

#define BatteryCooling_ES80Context_Ready(fsm) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "Ready"); \
    getState(fsm)->Ready((fsm)); \
    setTransition((fsm), NULL)

#define BatteryCooling_ES80Context_Run(fsm) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "Run"); \
    getState(fsm)->Run((fsm)); \
    setTransition((fsm), NULL)

#define BatteryCooling_ES80Context_Stop(fsm) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "Stop"); \
    getState(fsm)->Stop((fsm)); \
    setTransition((fsm), NULL)

#define BatteryCooling_ES80Context_Switch_2ChargingMode(fsm) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "Switch_2ChargingMode"); \
    getState(fsm)->Switch_2ChargingMode((fsm)); \
    setTransition((fsm), NULL)

#define BatteryCooling_ES80Context_Switch_2DrivingMode(fsm) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "Switch_2DrivingMode"); \
    getState(fsm)->Switch_2DrivingMode((fsm)); \
    setTransition((fsm), NULL)
#endif

#endif

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
